name: CI/CD Pipeline - Node.js with Docker and AWS
on:
 push:
   branches:
     - main
jobs:
# CI stage
 build-and-test:
   name: Build & Test
   runs-on: ubuntu-latest
   steps:
    # 1. checkout code
    - name: Checkout Code
      uses: actions/checkout@v4
    # 2. Setup Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    # 3. Install dependencies
    - name: Install dependencies
      run: npm install 
      
    # 4. Run Test
    - name: Run Tests
      run: npm test

# Build and push Docker image to ECR
 docker-build-push:
   name: Build & Push Docker Image
   needs: build-and-test
   runs-on: ubuntu-latest
   steps:
    - name: Checkout code
      uses: actions/checkout@v4
# Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
# Login to ECR
    - name: Login to Amazon ECR
      id: Login-ecr
      uses: aws-actions/amazon-ecr-login@v2
# Build and tag Docker image
    - name: Build docker Image
      run: |
       IMAGE_TAG=latest
       docker build -t myapp:$IMAGE_TAG .
       docker tag myapp:$IMAGE_TAG ${{ steps.Login-ecr.outputs.registry }}/myapp:$IMAGE_TAG

# Push image to ECR
    - name: Push Docker image
      run: |
        IMAGE_TAG=lateast
        docker push ${{ steps.Login-ecr.outputs.registry }}/myapp:$IMAGE_TAG

#DEPLOY to EC2
 deploy:
   name: Deploy to EC2
   needs: docker-build-push
   runs-on: ubuntu-latest
   steps:
   - name: Deploy via SSH
     uses: appleboy/ssh-action@v1.0.0
     with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USER }}
      key: ${{ secrets.EC2_SSH_KEY }}
      script: |
        REGISTRY=${{ secrets.REGISTRY }}
        REPO_NAME=myapp
        IMAGE_TAG=latest
        
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
        docker pull $REGISTRY/$REPO_NAME:$IMAGE_TAG
        
        docker stop myapp || true
        docker rm myapp || true
        docker run -d --name myapp -p 80:80 $REGISTRY/$REPO_NAME:$IMAGE_TAG
